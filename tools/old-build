#!/usr/bin/php

<?php


// Global Color Codes for BASH 
$BLACK       = "\033[0;30m";
$DARKGRAY    = "\033[1;30m";
$BLUE        = "\033[0;34m";
$LIGHTBLUE   = "\033[1;34m";  // current relevant emphasis text
$GREEN       = "\033[0;32m";  // standard text
$LIGHTGREEN  = "\033[1;32m";
$CYAN        = "\033[0;36m";
$LIGHTCYAN   = "\033[1;36m";
$RED         = "\033[0;31m";  // error text
$LIGHTRED    = "\033[1;31m";
$PURPLE      = "\033[0;35m";
$LIGHTPURPLE = "\033[1;35m";
$BROWN       = "\033[0;33m";
$YELLOW      = "\033[1;33m";  // user entered text
$LIGHTGRAY   = "\033[0;37m";
$WHITE       = "\033[1;37m";

// Global Data
$module_name = 'sample';                                        // name of the new module to build
$requests = array( 'description' => '', 'requests' => array() );  // initially blank controller design
$tables = array();                                                // initially blank database design

// Default to the last application version currently existing..
$apskel_files = scandir( '..' );
foreach( $apskel_files as $file ) {
	if( substr( $file, 0, 12) == 'application_' ) { $version = substr( $file, 12 ); }
}

//require_once( '../application_0.0/modules/user/user_registration.php' );  // TEMP
//require_once( '/var/www/workmosaic/application/1.0/agent/AgentRegistration.php' );  // TEMP

mainScreen();

function mainScreen() {
	global $GREEN, $LIGHTBLUE, $YELLOW, $RED;
	global $version, $module_name, $requests;
	$message     = "To build a new module, ensure you have named it, designed its controllers and\nits database.  Then use the build option and finally quit.  No changes are\napplied until you select build.\n";
	showMenu:
	// Heading 
	system('clear');
	echo "\n\t{$YELLOW}====================\n";
	echo "\t{$GREEN}MODULE BUILDING MENU\n";
	echo "\n";
	if( $message > '' ) {
		echo "{$LIGHTBLUE}$message";
		echo "\n";
	}

	// Menu
	echo "$GREEN";
	echo "\t(V)ersion of Application: \"{$YELLOW}{$version}{$GREEN}\"\n";
	echo "\t(M)odule Name (\"{$YELLOW}{$module_name}{$GREEN}\") & Description\n";
	echo "\t(C)ontroller Design\n";
	echo "\t(D)atabase Design\n";
	echo "\t(B)uild the Module\n";
	echo "\t(Q)uit\n";
	echo "\n";
	
	getSelection:
	// Menu Selection Input and Main Program Loop
	$option = input("Module Building Menu: ");
	$option = strtolower( substr( trim( $option ), 0, 1 ) );
	switch( $option ) {

		// version of application
		case 'v':
			$new_version = trim( input( 'Application Version:' ) );
			if( !file_exists( "../application_{$new_version}" ) ) {
				getAssureCreate:
				$create = trim( input( "{$RED}No such application version exists--create it (yes/no)? " ) );  
				switch( trim( strtolower( $create ) ) ) {
					case 'yes': break;
					case 'no': $message = "The application version was not changed."; goto showMenu; break;
					default: echo "{$RED}You must enter \"yes\" or \"no\" (excluding the quotes).\n"; goto getAssureCreate; break;
				}
				// TODO: make this draw from the previous highest or a selected version to create the initial new one..
				system( "cp -rp ../application_0.0 ../application_{$new_version}" );
				system( "cp -rp ../environments_0.0 ../environments_{$new_version}" );
				echo "{$GREEN}The application version \"{$new_version}\" was successfully created.\n";
				echo "NOTE: The new application version does not yet have an identities entry (mapping from URL to version/environment).\n";
				// TODO: if module exists, load it..
				sleep( 3 );
			}	
			$version = $new_version;
			$message = "The application version changed successfully.\n";
			goto showMenu;
			break;

		// name of new module
		case 'm':
			echo "{$GREEN}Old Module Name is \"{$YELLOW}{$module_name}{$GREEN}\".\n";
			$new_module_name = trim( input( "{$LIGHTBLUE}New Module Name (or enter to retain old): " ) );
			if( $new_module_name != '' ) {
				if( file_exists( "../application_{$version}/modules/{$new_module_name}" ) ) {
					// TODO: also ensure actual _registration file also exists.. and has at least main variables in it..
					echo "{$RED}A module by that name already exists--so loading its contents.\n";
					include("../application_{$version}/modules/{$new_module_name}/{$new_module_name}_registration.php");
				}
				$module_name = $new_module_name;
				$message = "Changed module name to \"{$YELLOW}{$module_name}{$LIGHTBLUE}\".  ";
			}
			else {
				$message = "Retained old module name of \"{$YELLOW}{$module_name}{$LIGHTBLUE}\".  ";
			}
			echo "{$GREEN}Old Module Description:\n\n{$requests['description']}\n\n";
			$new_module_description = trim( input( "{$LIGHTBLUE}New Module Description (or enter to retain old):\n" ) );
			if( $new_module_description != '' ) {
				$requests['description'] = $new_module_description;
				$message .= "Changed module description to:\n\n{$YELLOW}{$requests['description']}{$LIGHTBLUE}\n";
			}
			else {
				$message .= "Retained old module description of:\n\n{$YELLOW}{$requests['description']}{$LIGHTBLUE}\n";
			}
			goto showMenu;
			break;

		// controller design
		case 'c':
			controllerDesignMenu();
			$message = "Exited from controller design screen.\n";
			goto showMenu;
			break;

		// database design
		case 'd':
			databaseDesignMenu();
			$message = "Exited from database design screen.\n";
			goto showMenu;
			break;

		// build the module
		case 'b':
			$message = buildModule( $version, $module_name );
			goto showMenu;
			break;

		// quit
		case 'q':
			echo "{$GREEN}Exiting";
			echo '.';
			sleep(1); echo '.';
			sleep(1); echo '.';
			sleep(1);
			system('reset');
			exit;
			break;

		default:
			echo "{$RED}The choices to enter are n, c, d, b, or q, dummy.\n";
			goto getSelection;
			break;
	}
}

function controllerDesignMenu() {
	global $GREEN, $LIGHTBLUE, $YELLOW, $RED;
	global $module_name, $requests;
	$message     = "A controller is a collection of requests, each with a set of parameters.  For\nexample, the URL \"http://somewhere.com/{$module_name}/add?a=2&b=3\" is such\nthat the request is \"add\" and its parameters are \"a\" and \"b\".\n";
	showMenu:
	// Heading 
	system('clear');
	echo "\n{$YELLOW}\t======================\n";
	echo "{$GREEN}\tCONTROLLER DESIGN MENU\n";
	echo "\n";
	if( $message > '' ) {
		echo "{$LIGHTBLUE}$message";
		echo "\n";
	}

	// Controller Design Menu
	echo $GREEN;
	echo "\t(D)escription of Module:\n";
	echo "\n";
	echo "{$YELLOW}{$requests['description']}\n";
	echo "\n";
	echo "{$GREEN}Controller Requests (select number to edit in detail):\n";
	$number = 0;
	$mapping = array();
	foreach( $requests['requests'] as $request => $parameters ) {
		echo "{$GREEN}\t(" . ++$number . ") \"{$YELLOW}$request{$GREEN}\"\n";
		$mapping[$number] = $request;
	}
	echo "\t(N)ew request\n";
	echo "\t(R)emove request\n";
	echo "\t(Q)uit Back to Module Building Menu\n"; 
	echo "\n";

	// Get and reactio to menu selection
	getSelection:
	$option = input( "{$LIGHTBLUE}Controller Design Menu: {$YELLOW}" );
	if( is_numeric( $option ) ) { $option = strtolower( substr( trim( $option ), 0, 1 ) ); }
	switch( $option ) {
		case 'd':
			$module_description = input( "{$LIGHTBLUE}New Module Description:\n{$YELLOW}" );
			$requests['description'] = $module_description;
			$message = "The module description is now updated.\n";
			goto showMenu;
			break;

		case 'n':
			$request_name = input( "{$LIGHTBLUE}Enter Request Name: {$YELLOW}" );
			$requests['requests'][$request_name] = array( 'description' => '', 'parameters' => array() );
			$message = "The \"$request_name\" request was added.";
			goto showMenu;
			break;

		case 'r':
			$which = input( "{$LIGHTBLUE}Remove Which: {$YELLOW}" );
			if( isset( $mapping[$which] ) && isset( $requests['requests'][$mapping[$which]] ) ) {
				unset( $requests['requests'][$mapping[$which]] );
				$message = "Request was removed.";
				goto showMenu;
			}
			echo "{$RED}Cannot remove a non-existent request.\n";
			goto getSelection;
			break;

		case 'q':
			return;
			break;

		default:
			if( !is_numeric( $option ) || $option < 1 || $option > $number ) {
				echo "{$RED}Valid options are those listed within perenthesis..\n";
				goto getSelection;
			}
			editRequest( $mapping[$option] );
			$message = "Finished editing {$mapping[$option]}.\n";
			goto showMenu;
			break;
	}
}

function editRequest( $request_name ) {
	global $GREEN, $LIGHTBLUE, $YELLOW, $RED;
	global $module_name, $requests;
	$message     = "Entered the request editor..\n";
	showMenu:
	// Heading 
	system('clear');
	$title = "REQUEST EDITOR MENU (\"{$request_name}\")";
	echo "\n{$YELLOW}\t" . str_repeat('=', strlen( $title ) ) . "\n";
	echo "{$GREEN}\t{$title}\n";
	echo "\n";
	if( $message > '' ) {
		echo "{$LIGHTBLUE}$message";
		echo "\n";
	}

	// Request Editor Menu
	echo $GREEN;
	echo "\t(D)escription of \"{$request_name}\" Request:\n";
	echo "\n";
	echo "{$YELLOW}{$requests['requests'][$request_name]['description']}\n";
	echo "\n";
	echo "{$GREEN}Parameter Requests (select number to review/edit details):\n";
	$mapping = array();
	for( $param_number = 0; $param_number < sizeof( $requests['requests'][$request_name]['parameters'] ); $param_number += 1 ) {
		echo "{$GREEN}\t(" . ( $param_number + 1 ) . ") \"{$YELLOW}{$requests['requests'][$request_name]['parameters'][$param_number]['name']}{$GREEN}\"\n";
	}
	echo "\t(N)ew Parameter\n";
	echo "\t(R)emove Parameter\n";
	echo "\t(Q)uit Back to Controller Design Menu\n"; 
	echo "\n";

	// Get and reactio to menu selection
	getSelection:
	$option = input( "{$LIGHTBLUE}Controller Design Menu: {$YELLOW}" );
	if( is_numeric( $option ) ) { $option = strtolower( substr( trim( $option ), 0, 1 ) ); }
	switch( $option ) {
		case 'd':
			$request_description = input( "{$LIGHTBLUE}New Module Description:\n{$YELLOW}" );
			$requests['requests'][$request_name]['description'] = $request_description;
			$message = "The request description is now updated.\n";
			goto showMenu;
			break;

		case 'n':
			$requests['requests'][$request_name]['parameters'][] = getRequestParameter();
			$message = "The parameter was added.";
			goto showMenu;
			break;

		case 'r':
			$which = input( "{$LIGHTBLUE}Remove Which: {$YELLOW}" );
			$which -= 1;
			if( isset( $requests['requests'][$request_name]['parameters'][$which] ) ) {
				unset( $requests['requests'][$request_name]['parameters'][$which] );
				$message = "Parameter was removed.";
				goto showMenu;
			}
			echo "{$RED}Cannot remove a non-existent parameter.\n";
			goto getSelection;
			break;

		case 'q':
			return;
			break;

		default:
			if( !is_numeric( $option ) || $option < 1 || $option > $param_number ) {
				echo "{$RED}Valid options are those listed within perenthesis..\n";
				goto getSelection;
			}
			$option -= 1;
			$requests['requests'][$request_name]['parameters'][$option] = getRequestParameter( $requests['requests'][$request_name]['parameters'][$option] );
			$message = "Finished editing parameter #{$option}.\n";
			goto showMenu;
			break;
	}
}

function getRequestParameter( $parameter = null ) {
	global $GREEN, $LIGHTBLUE, $YELLOW, $RED;
	echo "$GREEN";
	if( $parameter === null ) {
		echo "Enter the new parameter's name, if it's required or not, its default value, and\nits description as prompted below.\n";
	}
	else {
		echo "For each parameter attribute below, either enter a new value or enter a blank\nline to retain the old value.\n";
	}

	// Parameter Name
	getName:
	echo "$GREEN";
	if( $parameter !== null ) {
		echo "\nOld Parameter \"Name\": {$parameter['name']}\n";
	}
	$name = input( "{$LIGHTBLUE}New Parameter \"Name\": {$YELLOW}" );
	if( $parameter === null ) {
		if( $name == '' ) {
			echo "{$RED}Provide a name--it's the most required part of a request parameter.\n";
			goto getName;
		}
		else { $new_name = $name; }
	}
	else {
		if( $name == '' ) { $new_name = $parameter['name']; }
		else { $new_name = $name; }
	}

	// Parameter Required
	getRequired:
	echo "$GREEN";
	if( $parameter !== null ) {
		if( $parameter['required'] === true ) { $required = 'True'; }
		else { $required = 'False'; }
		echo "\nOld Parameter \"required\": {$required}\n";
	}
	$required = input( "{$LIGHTBLUE}Is Parameter \"Required\" -- (T)rue Or (F)alse?: {$YELLOW}" );
	if( $parameter === null ) {
		if( $required == '' ) {
			echo "{$RED}You must specify if this is or is not a required parameter for the request.\n";
			goto getRequired;
		}
		else { $new_required = $required; }
	}
	else {
		if( $required == '' ) { $new_required = $parameter['required']; }
		else { $new_required = $required; }
	}

	if( $new_required > '' ) { $new_required = strtolower( substr( $new_required, 0, 1 ) ); }
	if( $new_required === 't' || $new_required === 'y' || $new_required == 1 ) { $new_required = true; }
	if( $new_required === 'f' || $new_required === 'n' || $new_required == 0 ) { $new_required = false; }

	if( !($new_required === true || $new_required === false ) ) {
		echo "{$RED}The value must be true or false.\n";
		goto getRequired;
	}

	// Parameter Default
	getDefault:
	echo "$GREEN";
	if( $parameter !== null ) {
		echo "\nOld Parameter \"Default\": ";
		if( $parameter['default'] === null ) { echo 'null'; }
		else { print_r( $parameter['default'] ); }
		echo "\n";
	}
	echo "The default value should be entered as if on the right side of a PHP assignment\nstatement.  Examples: null, '', 0, or true.\n";
	$default = input( "{$LIGHTBLUE}Parameter \"Default\" Value: {$YELLOW}" );
	if( $parameter === null ) {
		if( $default == '' ) {
			echo "{$RED}You didn't enter a default value.  You must at least enter null.\n";
			goto getDefault;
		}
		else { $new_default = eval( 'return ' . $default . ';' ); }  // TODO: make this safe..
	}
	else {
		if( $default == '' ) { $new_default = $parameter['default']; }
		else { $new_default = eval( 'return ' . $default . ';' ); }  // TODO: make this safe..
	}

	// Parameter Description
	getDescription:
	echo "$GREEN";
	if( $parameter !== null ) {
		echo "\nOld Parameter \"Description\":\n{$parameter['description']}\n";
	}
	$description = input( "{$LIGHTBLUE}Parameter \"Description\":\n{$YELLOW}" );
	if( $parameter === null ) {
		if( $description == '' ) {
			echo "{$RED}You need to enter at least some kind of simple description.  C'mon, think!\n";
			goto getDescription;
		}
		else { $new_description = $description; }
	}
	else {
		if( $description == '' ) { $new_description = $parameter['description']; }
		else { $new_description = $description; }
	}

	return array( 'name' => $new_name, 'required' => $new_required, 'default' => $new_default, 'description' => $new_description );
}

function DatabaseDesignMenu() {
	global $GREEN, $LIGHTBLUE, $YELLOW, $RED;
	global $tables;
	$message     = "This is where you design any database tables required by the new module.";
	showMenu:
	// Heading 
	system('clear');
	echo "\n{$YELLOW}\t====================\n";
	echo "{$GREEN}\tDATABASE DESIGN MENU\n";
	echo "\n";
	if( $message > '' ) {
		echo "{$LIGHTBLUE}$message";
		echo "\n";
	}

	// Database Design Menu
	echo "{$GREEN}Database Tables and Columns are listed below.  You may edit a table's name or a\ntable column's details by entering the reference number as shown within\nparenthesis.\n";
	$table_number = 0;
	$table_mapping  = array();
	$column_mapping = array();
	foreach( $tables as $table => $columns ) {
		echo "{$GREEN}\t(" . ++$table_number . ") \"{$YELLOW}$table{$GREEN}\"\n";
		$table_mapping[$table_number] = $table;
		$column_number = 0;
		foreach( $columns as $column => $attributes ) {
			echo "\t\t({$table_number}." . ++$column_number . ") \"{$YELLOW}$column{$GREEN}\"\n";
			$column_mapping["${table_number}.{$column_number}"] = $column;
		}
	}
	echo "\tNew (T)able\n";
	echo "\tNew (C)olumn\n";
	echo "\t(R)emove Table or Column\n";
	echo "\t(Q)uit Back to Module Building Menu\n"; 
	echo "\n";

	// Get and reactio to menu selection
	getSelection:
	$option = input( "{$LIGHTBLUE}Database Design Menu: {$YELLOW}" );
	if( !is_numeric( $option ) ) { $option = strtolower( substr( trim( $option ), 0, 1 ) ); }
	switch( $option ) {

		case 't':
			$table_name = input( "{$LIGHTBLUE}Enter New Table Name: {$YELLOW}" );
			if( $table_name == '' ) {
				echo "{$RED}No table created since you didn't provide a name.\n";
				goto getSelection;
			}
			else {
				$tables[$table_name] = array();
				$message = "Table \"{$table_name}\" was created.\n";
				goto showMenu;
			}
			break;

		case 'c':
			$table_reference = input( "${LIGHTBLUE}Enter Table Number: {$YELLOW}" );
			if( $table_reference == '' ) {
				echo "{$RED}Aborted column creation, since no table reference was given.\n";
				goto getSelection;
			}
			$column_name = input( "{$LIGHTBLUE}Enter New Column Name: {$YELLOW}" );
			if( $column_name == '' ) {
				echo "{$RED}No column created since you didn't provide a name.\n";
				goto getSelection;
			}
			else {
				if( isset( $table_mapping[$table_reference] ) ) {
					$table_name = $table_mapping[$table_reference]; 
					$tables[$table_name][$column_name] = getColumnAttributes();
					$message = "Table \"{$table_name}\" had column \"{$column_name}\" was created.\n";
					goto showMenu;
				}
				else {
					echo "{$RED}Failed to add column because table reference was not valid.\n";
					goto getSelection;
				}
			}
			break;

		case 'r':
			$reference = trim( input( "{$LIGHTBLUE}Remove Table or Column Reference: {$YELLOW}" ) );
				if( isset( $table_mapping[$reference] ) ) {
					$table_name = $table_mapping[$reference];
					unset( $tables[$table_name] );
					$message = "The \"{$table_name}\" table was removed.\n";	
					goto showMenu;
				}
				elseif( isset( $column_mapping[$reference] ) ) {
					$table_reference = abs( $reference );  // Is whitespace an issue?
					$table_name = $table_mapping[$table_reference];
					$column_name = $column_mapping[$reference];
					unset( $tables[$table_mapping[$table_reference]][$column_mapping[$reference]] );
					$message = "The \"{$table_name}\" table's \"{$column_name}\" column was removed.\n";	
					goto showMenu;
				}
				else {
					echo "{$RED}No such table or column reference.\n";
					goto getSelection;
				}
			break;

		case 'q':
			return;
			break;

		default:
			$reference = trim( $option ); 
			if( isset( $table_mapping[$reference] ) ) {
				$table_name = $table_mapping[$reference];
				$new_table_name = input( "{$LIGHTBLUE}Enter New Table Name for \"{$table_name}\":{$YELLOW} " );
				if( $new_table_name == '' ) {
					echo "{$RED}Canceling table name change because no new table name was entered.\n"; 
					goto getSelection;
				}
				else {
					$table = $tables[$table_name];
					$tables[$new_table_name] = $table;
					unset( $tables[$table_name] );
					$message = "The \"{$table_name}\" table was renamed to \"{$new_table_name}\".\n";	
					goto showMenu;
				}
			}
			elseif( isset( $column_mapping[$reference] ) ) {
				$table_reference = abs( $reference );  // Is whitespace an issue?
				$table_name = $table_mapping[$table_reference];
				$column_name = $column_mapping[$reference];
				$tables[$table_name][$column_name] = getColumnAttributes( $tables[$table_name][$column_name] );
				$message = "The \"{$table_name}\" table's \"{$column_name}\" column was reviewed/edited.\n";	
				goto showMenu;
			}
			else {
				echo "{$RED}No such table or column reference.\n";
				goto getSelection;
			}
			break;
	}
}

function getColumnAttributes( $attributes = null ) {
	global $RED, $LIGHTBLUE, $GREEN, $YELLOW;
	// type
	if( $attributes !== null) {
		echo "{$GREEN}Old Type: {$attributes['type']}\n";
	}
	getDataType:
	$type = trim( input( "{$LIGHTBLUE}Enter Data Type (integer, varchar(15), boolean, etc):{$YELLOW}\n" ) );
	if( $attributes === null) {
		if( $type == '' ) {
			echo "{$RED}A response is required here.\n";
			goto getDataType;
		}
		else {
			$new_type = $type;
		}
	}
	else {
		if( $type == '' ) {
			$new_type = $attributes['type'];
		}
		else {
			$new_type = $type;
		}
		
	}
	$new_type = strtoupper( $new_type );

	// key
	getKey:
	if( $attributes !== null) {
		if( !isset( $attributes['key'] ) || $attributes['key'] == '' ) { $readable_key = 'not a key'; }
		else { $readable_key = "{$attribute['key']} key"; }
		echo "{$GREEN}Old Key: {$readable_key}\n"; 
	}
	$key = trim( input( "{$LIGHTBLUE}Enter Key Type (p)rimary, (f)oreign, or (n)ot a key:{$YELLOW}\n" ) );
	if( $key > '' ) { $key = strtolower( substr( $key, 0, 1 ) ); }
	if( $attributes === null) {
		if( $key == '' ) {
			echo "{$RED}A response is required here.\n";
			goto getKey;
		}
		else {
			$new_key = $key;
		}
	}
	else {
		if( $key == '' ) {
			if( isset( $attributes['key'] ) && $attributes['key'] != '' ) { $new_key = $attributes['key']; }
			else { $new_key = 'n'; }
		}
		else {
			$new_key = $key;
		}
		
	}

	switch( $new_key ) {
		case 'p':
			$new_key = 'primary';
			break;

		case 'f':
			$new_key = 'foreign';
			break;

		case 'n':
			$new_key = '';
			break;

		default:
			echo "{$RED}The options were \"p\", \"f\", or \"n\".\n";
			goto getKey;
			break;
	}	

	// default
	getDefault:
	if( $attributes !== null) {
		echo "{$GREEN}Old Default: {$attributes['default']}\n";
	}
	$default = trim( input( "{$LIGHTBLUE}Enter Default (as if on an assignment statement, e.g. 'balls' or 3.14):{$YELLOW}\n" ) );
	if( $attributes === null) {
		if( $default == '' ) {
			echo "{$RED}A response is required here.\n";
			goto getDefault;
		}
		else {
			$new_default = $default;
		}
	}
	else {
		if( $default == '' ) {
			$new_default = $attributes['default'];
		}
		else {
			$new_default = $default;
		}
		
	}

	// filter
	getFilter:
	if( $attributes !== null) {
		if( !isset( $attributes['filter'] ) || $attributes['filter'] == '' ) { $attributes['filter'] = '//'; }
		echo "{$GREEN}Old Filter: {$attributes['filter']}\n";
	}
	$filter = trim( input( "{$LIGHTBLUE}Enter regular expression filter (or \"//\" (excluding the quotes) for none):{$YELLOW}\n" ) );
	if( $attributes === null) {
		if( $filter == '' ) {
			echo "{$RED}A response is required here.\n";
			goto getFilter;
		}
		else {
			$new_filter = $filter;
		}
	}
	else {
		if( $filter == '' ) {
			$new_filter = $attributes['filter'];
		}
		else {
			$new_filter = $filter;
		}
		
	}

	return array( 'type' => $new_type, 'default' => $new_default, 'filter' => $new_filter, 'key' => $new_key );
}

function buildModule( $version, $module_name ) {
	global $requests, $tables;
	global $RED, $LIGHTBLUE, $GREEN, $YELLOW;

	$file_when = date( 'Ymd-His' );
	$short_when = date( 'Y-m-d' );
	$classifized_module_name = ucfirst( $module_name );

        getAssureBuild:
	$ensure = input( "{$LIGHTBLUE}Are you sure you want to build the \"{$module_name}\" module under Application Version \"{$version}\" (yes or no)?\n" ); 
	switch( trim( strtolower( $ensure ) ) ) {
		case 'yes': break;
		case 'no': return "Module building was aborted."; break;
		default: echo "{$RED}You must enter \"yes\" or \"no\" (excluding the quotes).\n"; goto getAssureBuild; break;
	}

	// Build the module registration file
	$registration  = "<?\n";
	$registration .= "# File: {$module_name}_registration.php\n";
	$registration .= "# {$short_when} ... Created.\n";
	$registration .= "\n";
	$registration .= "\$requests = array(\n";
	$registration .= "\t'description' => '" . str_replace( "'", "\\'", $requests['description'] ) . "',\n";
	$registration .= "\t'requests' => array(\n";
	foreach( $requests['requests'] as $request_name => $request ) {
		$registration .= "\t\t'{$request_name}' => array(\n";
		$registration .= "\t\t\t'description' => '" . str_replace("'", "\\'", $request['description'] ) . "',\n"; 
		$registration .= "\t\t\t'parameters' => array(\n"; 
		foreach( $request['parameters'] as $parameter ) {
			$name        = str_replace( "'", "\\'", $parameter['name'] );
			$required    = $parameter['required'] ? 'true' : 'false';
			$default = $parameter['default'];
			if( $default === null )         { $default = 'null'; }
			elseif( is_string( $default ) ) { $default = "'" . str_replace( "'", "\\'", $parameter['default'] ) . "'"; }
			$description = str_replace( "'", "\\'", $parameter['description'] );
			$registration .= "\t\t\t\tarray( 'name' => '{$name}', 'required' => {$required} , 'default' => {$default}, 'description' => '{$description}' ),\n"; 
		}
		$registration .= "\t\t\t)\n";
		$registration .= "\t\t),\n";
	}
	$registration .= "\t)\n";
	$registration .= ");\n";
	$registration .= "\n";
	$registration .= "\$tables = array(\n";
	foreach( $tables as $table_name => $table ) {
		$registration .= "\t'{$table_name}' => array(\n";
		foreach( $table as $field_name => $field ) {
			$type    = str_replace( "'", "\\'", $field['type'] );
			$default = isset( $field['default'] ) ? ( is_string( $field['default'] ) ? "'{$field['default']}'" : $field['default'] ) : 'null' ;
			$key     = isset( $field['key'] ) ? "'" . $field['key'] . "'" : 'null';
			$filter  = isset( $field['filter'] ) ? $field['filter'] : '';
			$registration .= "\t\t'$field_name' => array( 'type' => '{$type}', 'default' => {$default}, 'key' => $key, 'filter' => '{$filter}' ),\n";
		}
		$registration .= "\t),\n";
	}
	$registration .= ");\n";

	// Build the module models file
	$models  = "<?php\n";
	$models .= "\n";
	$models .= "# File: ~/application_{$version}/modules/{$module_name}/{$module_name}_models.php\n";
	$models .= "# Purpose: provide data access to the {$module_name} module\n";
	$models .= "# {$short_when} ... created.\n";
	$models .= "\n";
	$models .= "require_once('models.php');\n";
	$models .= "\n";
	$models .= "# Class Declaration for {$module_name} Module's Models\n"; 
	$models .= "class {$classifized_module_name}Models extends Models\n";
	$models .= "{\n";
        $models .= "// Constructor\n";
        $models .= "\tpublic function __construct( \$param_framework ) {\n";
	$models .= "\t\t\$this->framework = \$param_framework;\n";
        $models .= "\t} // end of __construct method\n";
	$models .= "\n";
	$models .= "// Insert applicable model access methods in here..\n";
	$models .= "\n";
	$models .= "} // end of {$classifized_module_name}Models class\n";


	// Build the module views file
	$views  = "<?php\n";
	$views .= "\n";
	$views .= "# File: ~/application_{$version}/modules/{$module_name}/{$module_name}_views.php\n";
	$views .= "# Purpose: provide views for the {$module_name} module\n";
	$views .= "# {$short_when} ... created.\n";
	$views .= "\n";
	$views .= "require_once('views.php');\n";
	$views .= "\n";
	$views .= "# Class Declaration for {$module_name} Module's views\n"; 
	$views .= "class {$classifized_module_name}Views extends Views\n";
	$views .= "{\n";
        $views .= "\t// Constructor\n";
        $views .= "\tpublic function __construct( \$param_framework ) {\n";
	$views .= "\t\t\$this->framework = \$param_framework;\n";
	$views .= "\t\t\$this->loadViewTemplates(dirname(__FILE__));\n";
        $views .= "\t} // end of __construct method\n";
	$views .= "\n";
	foreach( $requests['requests'] as $request_name => $request ) {
		$request_name = strtolower( $request_name );
		$view_name = ucfirst( $request_name );
		$classifized_view_name = classifize( $request_name );
		$views .= "\t// View for the {$view_name} Request\n";
		$views .= "\tpublic function compose{$classifized_view_name}( \$param_fields = array() ) {\n";
		$views .= "\n";
		$views .= "\t\t// Set parameter defaults;\n";
		$views .= "\t\t\$title = '{$module_name} {$view_name}';\n";
		$views .= "\t\t\$messages = 'Welcome to the {$module_name} {$view_name} page.';\n";
		$views .= "\t\t\$warnings = '';\n";
		foreach( $request['parameters'] as $parameter ) {
			$views .= "\t\t\${$parameter['name']} = '';\n";
		}
		$views .= "\n";
		$views .= "\t\t// Override parameter defaults;\n";
		$views .= "\t\textract( \$param_fields );\n";
		$views .= "\n";
		$views .= "\t\t// Compose and Output the View;\n";
		$views .= "\t\treturn <<<EndOfHTML\n";
		$views .= "\t\t\t<link rel=\"stylesheet\" href=\"http://apskel.com/resources/user/main.css\" type=\"text/css\" media=\"screen\"/>\n";
		$views .= "\t\t\t<div id=\"{$request_name}_view_wrapper\" class=\"view_wrapper\">\n";
		$views .= "\t\t\t\t<span id=\"title\">\$title</span><br/><hr/>\n";
		$views .= "\t\t\t\t<div id=\"message_area\" class=\"message_area\">\n";
		$views .= "\t\t\t\t\t<span id=\"messages\" class=\"messages\">\$messages</span><br/>\n";
		$views .= "\t\t\t\t\t<span id=\"warnings\" class=\"warnings\">\$warnings</span><br/>\n";
		$views .= "\t\t\t\t</div>\n";
		$views .= "\t\t\t\t<br/>\n";
		$views .= "\t\t\t</div>\n";
		$views .= "EndOfHTML;\n";
		$views .= "\t} // end of compose{$view_name} view\n";
		$views .= "\n";
	}
	$views .= "} // end of {$classifized_module_name}Views class\n";

	// Build the module controllers file
	$controllers  = "<?php\n";
	$controllers .= "\n";
	$controllers .= "# File: ~/application_{$version}/modules/{$module_name}/{$module_name}_controllers.php\n";
	$controllers .= "# Purpose: provide controller logic for the {$module_name} module\n";
	$controllers .= "# {$short_when} ... created.\n";
	$controllers .= "\n";
	$controllers .= "require_once('controllers.php');\n";
	$controllers .= "require_once('{$module_name}/{$module_name}_models.php');\n";
	$controllers .= "require_once('{$module_name}/{$module_name}_views.php');\n";
	$controllers .= "\n";
	$controllers .= "# Class Declaration for {$module_name} Module's Controllers\n"; 
	$controllers .= "class {$classifized_module_name}Controllers extends Controllers\n";
	$controllers .= "{\n";
        $controllers .= "\t// Constructor\n";
        $controllers .= "\tpublic function __construct( \$param_framework ) {\n";
	$controllers .= "\t\t\$this->framework = \$param_framework;\n";
	$controllers .= "\n";
	$controllers .= "\t\t// Instantiate the associated model and view\n";
	$controllers .= "\t\t\$this->models = new {$module_name}Models(\$this->framework);\n";
	$controllers .= "\t\t\$this->views = new {$module_name}Views(\$this->framework);\n";
        $controllers .= "\t} // end of __construct method\n";
	$controllers .= "\n";
	foreach( $requests['requests'] as $request_name => $request ) {
		$request_name = strtolower( $request_name );
		$controller_name = ucfirst( $request_name );
		$classifized_controller_name = classifize( $request_name );
		$controllers .= "\t// Controller for the {$controller_name} Request\n";
		$controllers .= "\tpublic function process{$classifized_controller_name}( \$param = array() ) {\n";
		$controllers .= "\n";
		$controllers .= "\t\t// Set parameter defaults (in case any required ones are missing)\n";
		$controllers .= "\t\t\$messages = '';\n";
		$controllers .= "\t\t\$warnings = '';\n";
		foreach( $request['parameters'] as $parameter ) {
			$controllers .= "\t\t\${$parameter['name']} = '';\n";
		}
		$controllers .= "\n";
		$controllers .= "\t\t// Convert all request variables to local variables (except for any required by missing)\n";
		$controllers .= "\t\textract( \$param );\n";
		$controllers .= "\n";
		$controllers .= "\t\t// Unless a fresh visit to this page, show any missing parameters as warnings.\n";
		$controllers .= "\t\tif( \$fresh !== true ) { \$param['warnings'] .= \$missing; }\n";
		$controllers .= "\n";
		if( $request_name == 'initialize' ) {
			$controllers .= "\t\t// Do provided parameters validate?\n";
			$controllers .= "\t\t\$is_bad = false;\n";
			$controllers .= "\t\t//TODO: make \$is_bad = true if parameters do not validate\n";
			$controllers .= "\t\t\n";
			$controllers .= "\t\tif( !\$is_bad ) {\n";
			$controllers .= "\t\t\t\$this->models->buildTables( true );\n"; 
			$controllers .= "\t\t\t\$messages .= 'Initialization of the {$module_name} module was successful. ';\n";
			$controllers .= "\t\t\t\$this->framework->logMessage( \$messages, NOTICE );\n";
			$controllers .= "\t\t\treturn \$messages; // TODO: in this case, return what view?\n"; 
			$controllers .= "\t\t}\n";
			$controllers .= "\t\telse {\n";
			$controllers .= "\t\tif( \$messages !== '' ) { \$param['messages'] = \$messages; }\n";
			$controllers .= "\t\treturn \$this->views->compose{$classifized_controller_name}( \$param );\n";
			$controllers .= "\t\t}\n";
			$controllers .= "\t\t\n";
		} 
		else {
			$controllers .= "\t\t// Perform {$controller_name} logic\n";
			$controllers .= "\t\t// TODO\n";
			$controllers .= "\n";
			$controllers .= "\t\t// Compose and Output the View;\n";
			$controllers .= "\t\treturn \$this->views->compose{$classifized_controller_name}( \$param );\n";
		}
		$controllers .= "\t} // end of process{$controller_name} controller\n";
		$controllers .= "\n";
	}
	$controllers .= "} // end of {$classifized_module_name}Controllers class\n";

	// Save the module registration, models, views, and controllers files
	if( !file_exists( "../application_{$version}/modules/{$module_name}" ) ) {
		system( "mkdir ../application_{$version}/modules/{$module_name}" );
	}
	else {
		system( "mv ../application_{$version}/modules/{$module_name}/{$module_name}_registration.php ../application_{$version}/modules/{$module_name}/until-{$file_when}_{$module_name}_registration.php" );
		system( "mv ../application_{$version}/modules/{$module_name}/{$module_name}_models.php ../application_{$version}/modules/{$module_name}/until-{$file_when}_{$module_name}_models.php" );
		system( "mv ../application_{$version}/modules/{$module_name}/{$module_name}_views.php ../application_{$version}/modules/{$module_name}/until-{$file_when}_{$module_name}_views.php" );
		system( "mv ../application_{$version}/modules/{$module_name}/{$module_name}_controllers.php ../application_{$version}/modules/{$module_name}/until-{$file_when}_{$module_name}_controllers.php" );
	}
	file_put_contents( "../application_{$version}/modules/{$module_name}/{$module_name}_registration.php", $registration );
	file_put_contents( "../application_{$version}/modules/{$module_name}/{$module_name}_models.php", $models );
	file_put_contents( "../application_{$version}/modules/{$module_name}/{$module_name}_views.php", $views );
	file_put_contents( "../application_{$version}/modules/{$module_name}/{$module_name}_controllers.php", $controllers );

	return "The \"{$module_name}\" Module successfully built.";
}
	
function input( $output ) {
	global $LIGHTBLUE, $YELLOW;
	echo "{$LIGHTBLUE}$output{$YELLOW}";
	$stdin = fopen('/dev/stdin', 'r');
	$input = trim( fgets( $stdin ) );
	return $input;
}

function classifize( $name ) {
	$words = explode( '_', $name );
	$classifized_name = '';
	foreach( $words as $word ) {
		$classifized_name .= ucfirst( $word );
	}
	return $classifized_name;
}
