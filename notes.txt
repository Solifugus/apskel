
apskel/notes.txt

This is the root directory for this installation of the Apskel framework.  


* The following describes the purpose of each directory (or directory type) that
should exist under the apskel/ directory:

- apskel/notes.txt
- apskel/README.dm
- apskel/LICENSE
- apskel/webroot/
- apskel/identification.php
- apskel/environments_{version}/
- apskel/application_{version}/
- apskel/tools/


============================
The Request Handling Process

  1. index.php: A request is received.
     - The request may come from the webserver or command line parameters, 
       imitating a web request.

  2. identification.php: The identity (application version and environment) are
     determined from the domain name used.

  3. framework.php: The request parameters are cleaned, translated, and sent to
     the relevant controller.
     - The request may be called here either from step 2 or from a controller
       in step 4 (an internal sub-request).

  4. {module}_controller: The controller performs its designed actions and
     returns a set of response parameters to the framework.
     - A controller may make calls through the same module's controller or
       through sub-requests to other controllers via the framework (i.e.
       sending it back to step 3, recursively)

  5. framwork.php: The response parameters are formatted for the requester and
     returned thereto.  
     - If a response_format parameter is given, it will specify the formatting
       to use.  Otherwise, a default format will be selected depending on the
       requester type (i.e. http or https as html, or cli as text)
     - Possible values for the response_format parameter include:
       (a) text -- parameter name + colon + value + new line
       (b) xml -- value inside tag with parameter name (periods for tag levels)
       (c) html -- same as text, except in table
       (d) view={view name} -- uses named module view
       (e) template={template name} -- uses module template



==============================================================================
TODO:
  - add {{=template.html}} template annotation to pull up and embed the
    specified template file in the current one, prior to populating the
    whole thing together.  This will help with things like shared headers
    and footers.
  - Add module index standard method--unknown or missing module methods
    are directed to this standard catch-all method (with unknown or missing
    method name passed to it, also)
  - If returned view begins with <? or <?php then insert variables immediately
    thereafter and eval, instead of echo'ing.  This will enable PHP view 
    templates.. 
  - Change all database calls to the Models class, whereby it merely gets and
    maintains (to share) its database connection from Framework.
  - Build environment migration tool to ensure the integrity of migrations
    through pre-established paths: e.g. 
               prod 1.0 -> dev 1.1 -> stage 1.1 -> prod 1.1 
    ensuring no mistakes in the process.  This means, adding a place to define
    allowed migration paths.  This also invites adding test-suites between
    migrations
  - Build infrastructure to support contemplation.  Also, should an action 
    sequence with an error partially execute or cancel all executions?
  - Nonverbals returns may include commands for the client, but I should also
    devise of a solid set of emotional cues to correspond with what internal
    conditions, perhaps per action types executed: 
      normal, thinking, puzzled, intent, expecting, successful (refine this) 
  - build-in support data view-structures into the registration file and for
    data field filters, so as to build auto-validation code
    in the controllers.  This would provide model & form validation.
  - build ability to submit jsonized or form data to a request handler and
    directly into a model, validated and stored.  This should integrate
    seamlessly with auto-generated view templates.
  - Implement version control.  If an untested reaction breaks then mark as
    false (non-functional) such that any previously working version of it
    will revive.
  - Build [xxx:wildcard] utilities using parameterized regular expression
    translations to make this capable of internationalization: 
    * [change person:wildcard] to change the person
      e.g.: "my luck" to "your luck"
    * [generalize:wildcard] to strip any preceeding "the", "a", or "an"
      e.g.: "a car" to "car"
    * [specify:wildcard] to convert any "a" or "an" prefixes to "the"
      e.g.: "an apple" to "the apple" but not "the bike" to "the the bike"
    * [instantiate:wildcard] to add a "the" prefix (if not already there)
      e.g.: "horse" or "a horse" to "the horse"
  - build the semi-passive observer interface..
  - build the post-conversation editor..
  - Rework logging mechanism: when logging, specify or'd types:
    * Error                 -- something functionally broke
    * Unexpected Occurance  -- data or process flow is not as it should be
    * Awareness             -- not necessarily wrong, but high profile thing occured
    * Tracking              -- note about process flow and data along the way
    * System      -- problem pertains to system problems
    * Program     -- problem pertains to programming
    * Application -- problem pertains to application workings
    * Security    -- problem pertains to potential security breach
    * Critical -- main functionality failed
    * Minor    -- inconvenience may have resulted to user

==================
git Hub

How I started this for github:

git add -A *
git commit -m 'First Commit.'
git remote add origin https://github.com/Solifugus/apskel.git
git push -u origin master


